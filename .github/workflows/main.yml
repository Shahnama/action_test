# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
env:
  DAY_OF_WEEK: Monday

jobs:
  greeting_job:
    runs-on: ubuntu-latest
    env:
      Greeting: Hi

    steps:
      - uses: actions/checkout@v3.0.0
      
      - name: "Publish Bundles"
        run: |
          APK_PATH=$(find . -name "*.aab")
          IFS=- read VERSION_NAME PACKAGE_NAME VERSION_CODE rest<<< "$APK_PATH"

      - name: "JWT HEADER"
        run: | 
          JWT_HEADER=$(echo -n '{"alg":"RS256","typ":"JWT"}' | openssl base64 -e)

      - name: "JWT CLAIM"
        run: |  
          jwt_claims()
          {
            cat <<EOF
          {
            "iss": ${{ secrets.AUTH_ISS }},
            "scope": "https://www.googleapis.com/auth/androidpublisher",
            "aud": ${{ secrets.AUTH_AUD }},
            "iat": $(date +%s),
            "exp": $(($(date +%s)+300))
          }
          EOF
          }
          JWT_CLAIMS=$(echo -n "$(jwt_claims)" | openssl base64 -e)
          JWT_PART_1=$(echo -n "$JWT_HEADER.$JWT_CLAIMS" | tr -d '\n' | tr -d '=' | tr '/+' '_-')
          echo $JWT_PART_1
          echo "::set-output name=output::$JWT_PART_1"


      - name: "Sign JWT"

        run:  |
          echo "JWT_PART_1 -> ${{greeting_job.outputs.01}} "
          echo "$JWT_PART_1" > message.bin
          openssl dgst -binary -sha256 -sign privatekey.pem  -out jwt_sign.bin  message.bin
          JWT_SIGNING=$(cat jwt_sign.bin | openssl base64 -e )
          JWT_PART_2=$(echo -n "$JWT_SIGNING" | tr -d '\n' | tr -d '=' | tr '/+' '_-')
          echo $JWT_PART_1.$JWT_PART_2

      - name: "Getting access token..."
        run: |  
          HTTP_RESPONSE_TOKEN=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
            --header "Content-type: application/x-www-form-urlencoded" \
            --request POST \
            --data "grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer&assertion=$JWT_PART_1.$JWT_PART_2" \
            ${{ secrets.AUTH_AUD }})
          HTTP_BODY_TOKEN=$(echo $HTTP_RESPONSE_TOKEN | sed -e 's/HTTPSTATUS\:.*//g')
          HTTP_STATUS_TOKEN=$(echo $HTTP_RESPONSE_TOKEN | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')


          if [ $HTTP_STATUS_TOKEN != 200 ]; then
            echo -e "Create access token failed.\nStatus: $HTTP_STATUS_TOKEN\nBody: $HTTP_BODY_TOKEN\nExiting."
            exit 1
          fi
          ACCESS_TOKEN=$(echo $HTTP_BODY_TOKEN | jq -r '.access_token')


      - name: "Creating new edit..."
        run: |  
          # Create new edit
          echo "Creating new edit..."

          EXPIRY=$(($(date +%s)+120))
          post_data_create_edit()
          {
            cat <<EOF
          {
            "id": "github-$VERSION_CODE",
            "expiryTimeSeconds": "$EXPIRY"
          }
          EOF
          }

          HTTP_RESPONSE_CREATE_EDIT=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
            --header "Authorization: Bearer $ACCESS_TOKEN" \
            --header "Content-Type: application/json" \
            --request POST \
            --data "$(post_data_create_edit)" \
            https://www.googleapis.com/androidpublisher/v3/applications/$PACKAGE_NAME/edits)
          HTTP_BODY_CREATE_EDIT=$(echo $HTTP_RESPONSE_CREATE_EDIT | sed -e 's/HTTPSTATUS\:.*//g')
          HTTP_STATUS_CREATE_EDIT=$(echo $HTTP_RESPONSE_CREATE_EDIT | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

          

          if [ $HTTP_STATUS_CREATE_EDIT != 200 ]; then
            echo -e "Create edit failed.\nStatus: $HTTP_STATUS_CREATE_EDIT\nBody: $HTTP_BODY_CREATE_EDIT\nExiting."
            exit 1
          fi

          EDIT_ID=$(echo $HTTP_BODY_CREATE_EDIT | jq -r '.id')


      - name: "Uploading apk..."
        run: |  
          # Upload apk
          echo "Uploading apk..."

          HTTP_RESPONSE_UPLOAD_APK=$(curl --write-out "HTTPSTATUS:%{http_code}" \
            --header "Authorization: Bearer $ACCESS_TOKEN" \
            --header "Content-Type: application/octet-stream" \
            --progress-bar \
            --request POST \
            --upload-file $APK_PATH \
              https://androidpublisher.googleapis.com/upload/androidpublisher/v3/applications/$PACKAGE_NAME/edits/$EDIT_ID/bundles?uploadType=media)
          HTTP_BODY_UPLOAD_APK=$(echo $HTTP_RESPONSE_UPLOAD_APK | sed -e 's/HTTPSTATUS\:.*//g')
          HTTP_STATUS_UPLOAD_APK=$(echo $HTTP_RESPONSE_UPLOAD_APK | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          #   --header "Content-Type: application/vnd.android.package-archive" \
          #  https://www.googleapis.com/upload/androidpublisher/v3/applications/$PACKAGE_NAME/edits/$EDIT_ID/apks?uploadType=media)
          if [ $HTTP_STATUS_UPLOAD_APK != 200 ]; then
            echo -e "Upload apk failed\nStatus: $HTTP_STATUS_UPLOAD_APK\nBody: $HTTP_BODY_UPLOAD_APK\nExiting."
            exit 1
          fi


      - name: "Assigning edit to track..."
        run: |  
          # Assign edit to track
          echo "Assigning edit to track..."

          post_data_assign_track()
          {
            cat <<EOF
          {
            "track": "$PLAYSTORE_TRACK",
            "releases": [
              {
                "versionCodes": [
                  $VERSION_CODE
                ],
                "status": "draft"
              }
            ]
          }
          EOF
          }


          HTTP_RESPONSE_ASSIGN_TRACK=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
            --header "Authorization: Bearer $ACCESS_TOKEN" \
            --header "Content-Type: application/json" \
            --request PUT \
            --data "$(post_data_assign_track)" \
            https://www.googleapis.com/androidpublisher/v3/applications/$PACKAGE_NAME/edits/$EDIT_ID/tracks/$PLAYSTORE_TRACK)
          HTTP_BODY_ASSIGN_TRACK=$(echo $HTTP_RESPONSE_ASSIGN_TRACK | sed -e 's/HTTPSTATUS\:.*//g')
          HTTP_STATUS_ASSIGN_TRACK=$(echo $HTTP_RESPONSE_ASSIGN_TRACK | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

          if [ $HTTP_STATUS_ASSIGN_TRACK != 200 ]; then
            echo -e "Assign track failed\nStatus: $HTTP_STATUS_ASSIGN_TRACK\nBody: $HTTP_BODY_ASSIGN_TRACK\nExiting."
            exit 1
          fi

      - name: "Committing edit..."
        run: |  
          # Commit edit
          echo "Committing edit..."

          HTTP_RESPONSE_COMMIT=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
            --header "Authorization: Bearer $ACCESS_TOKEN" \
            --request POST \
            https://www.googleapis.com/androidpublisher/v3/applications/$PACKAGE_NAME/edits/$EDIT_ID:commit)
          HTTP_BODY_COMMIT=$(echo $HTTP_RESPONSE_COMMIT | sed -e 's/HTTPSTATUS\:.*//g')
          HTTP_STATUS_COMMIT=$(echo $HTTP_RESPONSE_COMMIT | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

          if [ $HTTP_STATUS_COMMIT != 200 ]; then
            echo -e "Commit edit failed\nStatus: $HTTP_STATUS_COMMIT\nBody: $HTTP_BODY_COMMIT\nExiting."
            exit 1
          fi

          echo "Success"
          
